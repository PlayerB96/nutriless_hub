// ‚ñë‚ñë‚ñë DATOS DE CONEXI√ìN Y GENERADOR ‚ñë‚ñë‚ñë

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// üßç MODELOS DE AUTENTICACI√ìN Y USUARIO 
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  // Relaciones del usuario
  UserFood UserFood[] // Alimentos creados por el usuario
  accounts Account[]
  sessions Session[]
  recipes  Recipe[] // Recetas creadas por el usuario
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// üçΩÔ∏è ALIMENTOS CREADOS POR USUARIO 
model Food {
  id        Int      @id @default(autoincrement())
  name      String
  category  String
  createdAt DateTime @default(now())
  userId    Int
  imageUrl  String?

  // Relaciones
  nutritionDetails  NutritionDetail[]
  householdMeasures HouseholdMeasure[]
  UserFood          UserFood[]
}

model UserFood {
  id     Int      @id @default(autoincrement())
  userId Int
  foodId Int
  date   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  food Food @relation(fields: [foodId], references: [id])
}

model NutritionDetail {
  id       Int    @id @default(autoincrement())
  foodId   Int
  nutrient String
  value    Float
  unit     String

  food Food @relation(fields: [foodId], references: [id])

  @@unique([foodId, nutrient], name: "foodId_nutrient")
}

model HouseholdMeasure {
  id          Int    @id @default(autoincrement())
  foodId      Int
  description String
  quantity    Float
  weightGrams Float

  food Food @relation(fields: [foodId], references: [id])
}

// üìö CATEGOR√çAS Y NUTRIENTES OPCIONALES
model CategoryFood {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model OptionalNutrient {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// üìñ RECETAS Y DETALLES
model Recipe {
  id         Int           @id @default(autoincrement())
  name       String
  tags       String[]
  portions   Int
  prepTime   Int
  cookTime   Int?
  difficulty String
  isPublic   Boolean       @default(false)
  createdAt  DateTime      @default(now())
  detail     RecipeDetail?

  image  String?
  userId Int?
  User   User?   @relation(fields: [userId], references: [id])
}

model RecipeDetail {
  id           Int      @id @default(autoincrement())
  recipeId     Int      @unique
  instructions String[]

  recipeIngredients RecipeIngredient[]

  recipe            Recipe           @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  TraditionalFood   TraditionalFood? @relation(fields: [traditionalFoodId], references: [id])
  traditionalFoodId Int?
}

// üßæ ALIMENTOS TRADICIONALES DEL SISTEMA
model TraditionalFood {
  id        Int      @id @default(autoincrement())
  name      String
  category  String
  origin    String?
  imageUrl  String?
  createdAt DateTime @default(now())

  nutrients         TraditionalNutrient[]
  recipeDetails     RecipeDetail[]
  householdMeasures TraditionalHouseholdMeasure[]
  RecipeIngredient  RecipeIngredient[]
}

model TraditionalNutrient {
  id        Int      @id @default(autoincrement())
  foodId    Int
  nutrient  String
  value     Float
  unit      String
  createdAt DateTime @default(now())

  food TraditionalFood @relation(fields: [foodId], references: [id])
}

model TraditionalHouseholdMeasure {
  id          Int    @id @default(autoincrement())
  foodId      Int
  description String
  quantity    Float
  weightGrams Float

  food             TraditionalFood    @relation(fields: [foodId], references: [id])
  RecipeIngredient RecipeIngredient[]

  @@unique([foodId, description, quantity])
}

model RecipeIngredient {
  id             Int   @id @default(autoincrement())
  recipeDetailId Int
  foodId         Int
  medidaId       Int
  cantidad       Float

  recipeDetail RecipeDetail                @relation(fields: [recipeDetailId], references: [id])
  food         TraditionalFood             @relation(fields: [foodId], references: [id])
  medida       TraditionalHouseholdMeasure @relation(fields: [medidaId], references: [id])

  @@unique([recipeDetailId, foodId])
}
